@page "/"
@using RaspiFanController.Logic
@inject RaspiTemperatureController RaspiTemperatureController

<div class="container">
    <div class="row">
    @if (IsPlatformSupported)
    {
        <div class="col-sm">
            <div class="card">
                <h1 class="card-header text-center text-white bg-info mb-3">Temperature: @Temperature°@Unit</h1>
                <div class="card-body">
                    <div class="row">
                        <div class="col-7">
                            <h5>Fan is running</h5>
                        </div>
                        <div class="col-5">
                            <h5>@FanIsRunning</h5>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-7">
                            Threshold
                        </div>
                        <div class="col-5">
                            @TemperatureThreshold°@Unit
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-7">
                            Mode
                        </div>
                        <div class="col-5">
                            @RegulationMode
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-7">
                            Sleep time
                        </div>
                        <div class="col-5">
                            @SleepTime s
                        </div>
                    </div>
                </div>
                <div class="card-footer text-white bg-info mb-3">
                    <form>
                        <fieldset class="form-group">
                            <div class="row">
                                <legend class="col-form-label col-7 pt-0">Mode</legend>
                                <div class="col-5">
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Automatic)" value="Automatic" @onchange="ModeChanged" /> Automatic
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Manual)" value="Manual" @onchange="ModeChanged" /> Manual
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="form-group">
                            <div class="row">
                                <legend class="col-form-label col-7 pt-0">Fan</legend>
                                <div class="col-5">
                                    <div class="form-check">
                                        @if (AllowManualControl)
                                        {
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="fanIsRunning" value="True" @onchange="FanIsRunningChanged" /> Turn On
                                            </label>
                                        }
                                        else
                                        {
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="fanIsRunning" value="True" @onchange="FanIsRunningChanged" disabled /> Turn On
                                            </label>
                                        }
                                    </div>
                                    <div class="form-check">
                                        @if (AllowManualControl)
                                        {
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="fanIsRunning" value="False" @onchange="FanIsRunningChanged" /> Turn Off
                                            </label>
                                        }
                                        else
                                        {
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="fanIsRunning" value="False" @onchange="FanIsRunningChanged" disabled /> Turn Off
                                            </label>
                                        }
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                        <div class="form-group row">
                            <label for="threshold" class="col-7 col-form-label">Threshold [°@Unit]</label>
                            <div class="col-5">
                                <input type="number" class="form-control" id="threshold" name="threshold" value="@TemperatureThreshold" @onchange="TemperatureThresholdChanged">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="sleepTime" class="col-7 col-form-label">Sleep time [s]</label>
                            <div class="col-5">
                                <input type="number" class="form-control" id="sleepTime" name="sleepTime" value="@SleepTime" @onchange="SleepTimeChanged">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>


        @if (HasError)
        {
            <div class="alert alert-danger" role="alert">
                Error message: @ErrorMessage
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Sorry, your OS platform is not supported.
        </div>
    }
    </div>
</div>

@code {

    private RegulationMode RegulationMode { get; set; }

    private bool IsPlatformSupported { get; set; }

    private bool FanIsRunning { get; set; }

    private bool AllowManualControl { get; set; }

    private string Temperature { get; set; }

    private int TemperatureThreshold { get; set; }

    private int SleepTime { get; set; }

    private string Unit { get; set; }

    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);

    private string ErrorMessage { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        AllowManualControl = RaspiTemperatureController.RegulationMode == RegulationMode.Manual;
        IsPlatformSupported = RaspiTemperatureController.IsPlatformSupported;

        StartPollingAsync();
    }

    private async void StartPollingAsync()
    {
        while (true)
        {
            Temperature = $"{RaspiTemperatureController.CurrentTemperature:F1}";
            TemperatureThreshold = RaspiTemperatureController.TemperatureThreshold;
            SleepTime = RaspiTemperatureController.MinimumSleepTime;
            Unit = RaspiTemperatureController.Unit;
            RegulationMode = RaspiTemperatureController.RegulationMode;
            FanIsRunning = RaspiTemperatureController.IsFanRunning;

            StateHasChanged();

            await Task.Delay(RaspiTemperatureController.RefreshInterval);
        }
    }

    private void ModeChanged(ChangeEventArgs changeEventArgs)
    {
        switch (changeEventArgs.Value)
        {
            case "Automatic":
                RaspiTemperatureController.SetAutomaticTemperatureRegulation();
                AllowManualControl = false;
                break;
            case "Manual":
                AllowManualControl = true;
                break;
        }
    }

    private void TemperatureThresholdChanged(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            RaspiTemperatureController.SetTemperatureThreshold(result);
        }
        else
        {
            ErrorMessage = "Please enter a valid number for temperature threshold";
        }
    }

    private void SleepTimeChanged(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            RaspiTemperatureController.SetSleepTime(result);
        }
        else
        {
            ErrorMessage = "Please enter a valid number for sleep time";
        }
    }

    private void FanIsRunningChanged(ChangeEventArgs changeEventArgs)
    {
        if (bool.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            RaspiTemperatureController.SetManualTemperatureRegulation(result);
        }
        else
        {
    // Fallback to avoid overheating
            RaspiTemperatureController.SetManualTemperatureRegulation(true);
        }
    }

}