@page "/"
@using RaspiFanController.Logic
@inject RaspiTemperatureController RaspiTemperatureController

@if (IsPlatformSupported)
{
    <p>Current temperature: @Temperature°@Unit</p>
    <p>Temperature threshold: @TemperatureThreshold°@Unit</p>
    <p>Sleep time: @SleepTime s</p>
    <p>Mode: @RegulationMode</p>
    <p>Fan is running: @FanIsRunning</p>

    <label>
        <input type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Automatic)" value="Automatic" @onchange="ModeChanged"/> Automatic
    </label>
    <label>
        <input type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Manual)" value="Manual" @onchange="ModeChanged"/> Manual
    </label>
    <br/>
    @if (AllowManualControl)
    {
        <label>
            <input type="radio" name="fanIsRunning" value="True" @onchange="FanIsRunningChanged"/> True
        </label>
        <label>
            <input type="radio" name="fanIsRunning" value="False" @onchange="FanIsRunningChanged"/> False
        </label>
    }
    else
    {
        <label>
            <input type="radio" name="fanIsRunning" value="True" @onchange="FanIsRunningChanged" disabled/> True
        </label>
        <label>
            <input type="radio" name="fanIsRunning" value="False" @onchange="FanIsRunningChanged" disabled/> False
        </label>
    }
    <br/>
    <label>
        Temperature Threshold [°@Unit]:
        <input type="number" id="threshold" name="threshold" @onchange="TemperatureThresholdChanged">
    </label>
    <br/>
    <label>
        Sleep time [s]:
        <input type="number" id="sleepTime" name="sleepTime" @onchange="SleepTimeChanged">
    </label>

    @if (HasError)
    {
        <p>Error message: @ErrorMessage</p>
    }
}
else
{
    <p>Sorry, your OS platform is not supported.</p>
}



@code {

    private RegulationMode RegulationMode { get; set; }

    private bool IsPlatformSupported { get; set; }

    private bool FanIsRunning { get; set; }

    private bool AllowManualControl { get; set; }

    private double Temperature { get; set; }

    private double TemperatureThreshold { get; set; }

    private int SleepTime { get; set; }

    private string Unit { get; set; }

    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);

    private string ErrorMessage { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        AllowManualControl = RaspiTemperatureController.RegulationMode == RegulationMode.Manual;
        IsPlatformSupported = RaspiTemperatureController.IsPlatformSupported;

        StartPollingAsync();
    }

    private async void StartPollingAsync()
    {
        while (true)
        {
            Temperature = Math.Round(RaspiTemperatureController.CurrentTemperature, 1);
            TemperatureThreshold = Math.Round(RaspiTemperatureController.TemperatureThreshold, 1);
            SleepTime = RaspiTemperatureController.MinimumSleepTime;
            Unit = RaspiTemperatureController.Unit;
            RegulationMode = RaspiTemperatureController.RegulationMode;
            FanIsRunning = RaspiTemperatureController.IsFanRunning;

            StateHasChanged();

            await Task.Delay(RaspiTemperatureController.RefreshInterval);
        }
    }

    private void ModeChanged(ChangeEventArgs changeEventArgs)
    {
        switch (changeEventArgs.Value)
        {
            case "Automatic":
                RaspiTemperatureController.SetAutomaticTemperatureRegulation();
                AllowManualControl = false;
                break;
            case "Manual":
                AllowManualControl = true;
                break;
        }
    }

    private void TemperatureThresholdChanged(ChangeEventArgs changeEventArgs)
    {
        if (double.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            RaspiTemperatureController.SetTemperatureThreshold(result);
        }
        else
        {
            ErrorMessage = "Please enter a valid number for temperature threshold";
        }
    }

    private void SleepTimeChanged(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            RaspiTemperatureController.SetSleepTime(result);
        }
        else
        {
            ErrorMessage = "Please enter a valid number for sleep time";
        }
    }

    private void FanIsRunningChanged(ChangeEventArgs changeEventArgs)
    {
        if (bool.TryParse(changeEventArgs?.Value?.ToString(), out var result))
        {
            RaspiTemperatureController.SetManualTemperatureRegulation(result);
        }
        else
        {
    // Fallback to avoid overheating
            RaspiTemperatureController.SetManualTemperatureRegulation(true);
        }
    }

}